= Skinny Spec

Skinny Spec is a collection of spec helper methods designed to help trim the fat and DRY up
some of the bloat that sometimes results from properly specing your classes and templates.

== Requirements and Recommendations

Obviously you'll need to be using RSpec[http://github.com/dchelimsky/rspec/tree/master] and
Rspec-Rails[http://github.com/dchelimsky/rspec-rails/tree/master] as your testing framework.
To benefit from Skinny Spec's scaffolding, you'll need to be using make_resourceful as well.
I've got plans to add a more generic Rails' scaffolding but I have <i>lots</i> of plans so
don't hold your breath.

In addition, Skinny Spec uses Ruby2Ruby to make nicer expectation messages and you'll want to
have that installed as well. It's not a dependency or anything but it <i>is</i> highly
recommended.

== Setup

Once you've installed the plugin in your app's vendor/plugins folder, you're ready to rock!
Skinny Spec includes itself into the proper RSpec classes so there's no configuration on your
part. Sweet!

== Usage

The simplest way to use Skinny Specs is to generate a resource scaffold:

  script/generate skinny_scaffold Foo

This command takes the usual complement of attribute definitions like
<tt>script/generate scaffold</tt>. Then have a look at the generated files (particularly the
specs) to see what's new and different with Skinny Spec.

=== Controller Specs

Let's look at the controller specs. First thing you should see is a method definition for 
<tt>valid_attributes</tt>. This will be used later by the <tt>create</tt> and <tt>update</tt>
specs to more accurately represent how the controller works in actual practice by supplying
somewhat real data for the <tt>params</tt> coming from the HTML forms.

Next we find an example group for <tt>GET :index</tt>. That <tt>stub_index</tt> method there
does a lot of work behind the curtain. I'll leave it up to you to check the documentation for it
(and its brothers and sister methods like <tt>stub_new</tt>) but I will point out that the
methods named <tt>stub_<i>controller_method</i></tt> should only be used for stubbing and
mocking the main object of the method. To create mocks for other ancillary objects, please
use <tt>stub_find_all</tt>, <tt>stub_find_one</tt>, and <tt>stub_initialize</tt>. The reason
for this is because the former methods actually save us a step by defining an implicit 
controller method request. If you add a new method to your resource routing, you'll want to
use the helper method <tt>define_request</tt> in those example groups to define an explicit
request.

Finally we get to the meat of the spec and of Skinny Specs itself: the actual expectations.
The first thing you'll notice is the use of example group (read: "describe" block) level methods
instead of the usual example (read: "it") blocks. Note that none of these methods use the
instance variables defined in the "before" block because they are all nil at the example block
level. Let's look at a sample method to see how it works:

  it_should_find :foos

This wraps an expectation that <tt>Foo.should_receive(:find).with(:all)</tt>. Using this helper
at the example group level saves us three lines over using an example block. (If this isn't
significant to you, this is probably the wrong plugin for you as well. Sorry.) You can add
more detailed arguments to that find. Check the documentation for <tt>it_should_find</tt> for
more information. You might have guessed that <tt>it_should_assign</tt> and
<tt>it_should_render_template</tt> work in a similar fashion and you'd be right. Again,
see the documentation for these individual methods for more information.

Before we're through with the controller specs, let me point out one more important detail. In
order to use <tt>it_should_redirect_to</tt> we have to send the routing inside a block argument
there so it can be evaluated in the example context instead of the example group, where it
completely blows up. This methodology is used anywhere routing is referred to in a "skinny",
example group level spec.

=== View Specs

Now let's move to the view specs! Like the special <tt>stub_index</tt> methods in the controller
specs, the view specs have a shorthand mock and stub helpers: <tt>mock_and_assign</tt> and
<tt>mock_and_assign_collection</tt>. These are well documented so please check them out.

There are also some really nice helper methods that I'd like point out. First is <tt>it_should_link_to_<i>controller_method</i></tt>. These methods (there's one each for
<tt>new</tt>, <tt>edit</tt>, <tt>show</tt>, and <tt>delete</tt>) point to instance variables
which you should be created in the "before" blocks with <tt>mock_and_assign</tt>. Second is
<tt>it_should_allow_editing</tt> which is likewise covered extensively in the documentation and
I will just point out here that, like <tt>it_should_link_to_edit</tt> and such, it takes a
symbol for the name of the instance variable it refers to and <i>additionally</i> takes
a symbol for the name of the attribute to be edited.

Also note that, when constructing a long form example, instead of defining an instance variable
for the name of the template and calling <tt>render @that_template</tt> you can simply call
<tt>do_render</tt> which takes the name of the template from the outermost example group where
it is customarily stated.

=== Model Specs

There's not a lot that Skinny Spec does here besides add a matcher for the various ActiveRecord
associations. On the example group level you call them like:

  it_should_belong_to :foo
  it_should_have_many :bars
  
Within an example you can call them on either the class or the instance setup in the
"before" block. These are equivalent:

  @foo.should belong_to(:bar)
  Foo.should belong_to(:bar)
  
Please consult the documentation for more information.

== Miscellaneous Notes

In the scaffolding, I have used my own idiomatic Rails usage:

* All controller actions which use HTML forms [<tt>new</tt>, <tt>edit</tt>, etc] use a shared
  form and leverage <tt>form_for</tt> to its fullest by letting it create the appropriate
  action and options.
* Some instances where you might expect link_to are button_to. This is to provide a common
  interface element which can be styled the same instead of a mishmash of links and buttons and
  inputs everywhere. To take full advantage of this, I usually override many of Rails' default
  helpers with custom ones that all use actual HTML <tt>BUTTON</tt> elements which are much 
  easier to style than "button" typed <tt>INPUT</tt>. I've provided a text file in the
  "additional" folder of this plugin which you can use in your ApplicationHelper. (I also
  provide an optional override helper for the <tt>label</tt> method which uses
  <tt>#titleize</tt> instead of <tt>humanize</tt> for stylistic reasons).
* Probably more that I can't think of.

== Credits and Thanks

Sections of this code were taken from or inspired by Rick Olsen's
rspec_on_rails_on_crack[http://github.com/technoweenie/rspec_on_rails_on_crack/tree/master].